#!/bin/bash

read -r -d '' CONFIG_HEADER << EOM
delay 150
define default
        width 16  # Going to be overridden.
        height 16 # Going to be overridden.
        frames 4  # Going to be overridden.
        speed 4   # Default speed
        directions 1 # Default number of directions 
EOM

read -r -d '' ABOUT_CONTENTS << EOM
artist Someone on the internet probably.
maintainer No one.
copyright 1994-1996 weasels
license Be gay, do crimes
comment Generated by a janky shell script.
icon icon.png
date $(date '+%-d %B %Y')
EOM

read -r -d '' CONFIG_TOON_STUB << EOM
toon #TOONNAME#
        number 1
        define walker pixmap #TILESETFILE# frames #FRAMES# width #WIDTH# height #HEIGHT#
        define faller pixmap #TILESETFILE# frames #FRAMES# width #WIDTH# height #HEIGHT# terminal_velocity 8 acceleration 1
        define tumbler pixmap #TILESETFILE# frames #FRAMES# width #WIDTH# height #HEIGHT# speed 1 acceleration 1 terminal_velocity 8
        define floater pixmap #TILESETFILE# frames #FRAMES# width #WIDTH# height #HEIGHT# speed 3
EOM

#set -x
set -e

# I hope your terminal supports colors, because you're getting a bunch of escape codes.
function echoDbug {
  echo -e "\e[90m[$(date -u +%Y-%m-%dT%TZ)]\e[96m[Dbug]\e[94m:	\e[39m$@"
  #echo "[$(date -u +%Y-%m-%dT%TZ)][Dbug]:	$@"
}

function echoInfo {
  echo -e "\e[90m[$(date -u +%Y-%m-%dT%TZ)]\e[92m[Info]\e[94m:	\e[39m$@"
  #echo "[$(date -u +%Y-%m-%dT%TZ)][Info]:	$@"
}

function echoWarn {
  echo -e "\e[90m[$(date -u +%Y-%m-%dT%TZ)]\e[93m[WARN]\e[94m:	\e[39m$@"
  #echo "[$(date -u +%Y-%m-%dT%TZ)][Warn]:	$@"
}

function echoCrit {
  echo -e "\e[90m[$(date -u +%Y-%m-%dT%TZ)]\e[91m[CRIT]\e[94m:	\e[39m$@"
  #echo "[$(date -u +%Y-%m-%dT%TZ)][Crit]:	$@"
}

function genToon {
  in_file="$1"
  out_dir="$2"
  name_stub="$(basename "$in_file" | sed 's/\.gif$//I')" # If you're in BSD-land, the 'I' case-insensitivity flag may cause a Bad Time(tm). GLHF.
  if ! genXPMTileset "$in_file" "$out_dir" "$name_stub" ; then
    echoWarn "Failed to generate an XPM tileset for file '$in_file'. Skipping config for this toon."
    return
  fi
  height="$(convert "${in_file}[0]" -format '%h' info:)"
  width="$(convert "${in_file}[0]" -format '%w' info:)"
  frames="$(identify -format '%n\n' "${in_file}" | head -n 1)"
  echo "$CONFIG_TOON_STUB" \
  | sed "s/#HEIGHT#/${height}/g" \
  | sed "s/#WIDTH#/${width}/g" \
  | sed "s/#FRAMES#/${frames}/g" \
  | sed "s/#TILESETFILE#/${name_stub}.xpm/g" \
  | sed "s/#TOONNAME#/${name_stub}/g" >> "${out_dir}/config" # You didn't use any weird characters in your input filename, right? ...right?
}

function genXPMTileset {
  in_file="$1"
  out_dir="$2"
  name_stub="$3"
  convert -coalesce "$in_file" "${tmp_dir}/${name_stub}_%05d.png" || return 1 # If an input GIF has more than %05d frames, we have bigger problems.
  convert +append "${tmp_dir}/${name_stub}_"*".png" "${out_dir}/${name_stub}.xpm" || return 1
  cp "${tmp_dir}/${name_stub}_00000.png" "${out_dir}/icon.png" # If running with multiple emojis, we'll just overwrite the icon with each one and settle on the last one. I don't know where the icon is even used, tbh.
  rm "${tmp_dir}/${name_stub}_"*".png"
}


if [ -z "$(which convert)" ] ; then
  echoCrit 'No `convert` command found in the current $PATH! You may need to install imagemagick (sorry).'
  exit 1
fi

if [ -z "$3" ] ; then
  echoInfo "Usage: $0 <Output Dir> <Emoji GIF> [Emoji GIF 2] ... [Emoji GIF n]"
  echoInfo '- Output Dir: Directory to place the new xpenguin config and resources.'
  echoInfo '  The output directory also determines the theme name.'
  echoInfo '  This script will not check of the dir exists and will happily overwrite existing files.'
  echoInfo '- Emoji GIF: Any animated GIF. Small GIFS like Discord/Slack/Telegram emojis are recommended, but feel free to send it.'
  exit 1
fi

tmp_dir="$(mktemp -d)"
mkdir -p "$tmp_dir"

out_dir="$1"
shift
emoji_files="$@"

mkdir -p "$out_dir"

echoInfo "Generating initial configs..."
echo "$CONFIG_HEADER" > "${out_dir}/config"
echo "$ABOUT_CONTENTS" > "${out_dir}/about"
for emoji_file in ${emoji_files[@]} ; do
  echoInfo "Generating Toon for '${emoji_file}'..."
  genToon "$emoji_file" "$out_dir"
done

rm -r "$tmp_dir"
